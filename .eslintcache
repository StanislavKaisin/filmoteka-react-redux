[{"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\index.tsx":"1","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\reportWebVitals.ts":"2","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\middleware\\localStorage.ts":"3","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\sagas.ts":"4","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\App.tsx":"5","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\rootReducer.tsx":"6","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\error\\errorActions.ts":"7","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\currentPage\\pagesResultsTypes.ts":"8","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\error\\errorTypes.ts":"9","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loadMovie\\loadMovieTypes.ts":"10","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\fetchMovie\\fetchMovieTypes.ts":"11","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\apiAttributes\\apiAttributes.ts":"12","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loader\\loaderActions.ts":"13","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\fetchMovie\\fetchMovieReducer.ts":"14","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\searchResults\\searchResultsTypes.ts":"15","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\searchResults\\searchResultsReducer.ts":"16","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loader\\loaderReducer.ts":"17","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\currentPage\\currentPageReducer.ts":"18","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loadMovie\\loadMovieReducer.ts":"19","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\error\\errorReducer.ts":"20","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\search\\searchReducer.ts":"21","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\library\\libraryReducer.ts":"22","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\search\\searchTypes.tsx":"23","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\AppBar.tsx":"24","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\pages\\MoviePage.tsx":"25","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\pages\\HomePage.tsx":"26","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\pages\\LibraryPage.tsx":"27","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loader\\loaderTypes.ts":"28","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\library\\libraryTypes.ts":"29","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\fetchMovie\\fetchMovieActions.ts":"30","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\library\\libraryActions.ts":"31","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\Loader.tsx":"32","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\PaginationList.tsx":"33","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\SearchField.tsx":"34","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\LibraryButton.tsx":"35","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\currentPage\\currentPageActions.ts":"36","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\ScrollTop.tsx":"37","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\PaginationLibraryList.tsx":"38","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\PaginationListHelpers\\splitMoviesList.ts":"39"},{"size":1297,"mtime":1622928038831,"results":"40","hashOfConfig":"41"},{"size":425,"mtime":499162500000,"results":"42","hashOfConfig":"41"},{"size":587,"mtime":1622928259032,"results":"43","hashOfConfig":"41"},{"size":4883,"mtime":1623964806573,"results":"44","hashOfConfig":"41"},{"size":672,"mtime":1622653263103,"results":"45","hashOfConfig":"41"},{"size":972,"mtime":1621714885425,"results":"46","hashOfConfig":"41"},{"size":410,"mtime":1617556886186,"results":"47","hashOfConfig":"41"},{"size":104,"mtime":1617564868809,"results":"48","hashOfConfig":"41"},{"size":82,"mtime":1617353069369,"results":"49","hashOfConfig":"41"},{"size":41,"mtime":1618777901826,"results":"50","hashOfConfig":"41"},{"size":43,"mtime":1618156975921,"results":"51","hashOfConfig":"41"},{"size":255,"mtime":1618254970151,"results":"52","hashOfConfig":"41"},{"size":336,"mtime":1616866303894,"results":"53","hashOfConfig":"41"},{"size":545,"mtime":1620240150131,"results":"54","hashOfConfig":"41"},{"size":49,"mtime":1616960023644,"results":"55","hashOfConfig":"41"},{"size":523,"mtime":1617215158540,"results":"56","hashOfConfig":"41"},{"size":460,"mtime":1616866563954,"results":"57","hashOfConfig":"41"},{"size":446,"mtime":1617643696197,"results":"58","hashOfConfig":"41"},{"size":597,"mtime":1619360638456,"results":"59","hashOfConfig":"41"},{"size":553,"mtime":1617556697136,"results":"60","hashOfConfig":"41"},{"size":440,"mtime":1617814742530,"results":"61","hashOfConfig":"41"},{"size":1358,"mtime":1623964832682,"results":"62","hashOfConfig":"41"},{"size":45,"mtime":1616937465814,"results":"63","hashOfConfig":"41"},{"size":1634,"mtime":1612815875009,"results":"64","hashOfConfig":"41"},{"size":7320,"mtime":1624286841229,"results":"65","hashOfConfig":"41"},{"size":2781,"mtime":1624133142183,"results":"66","hashOfConfig":"41"},{"size":5671,"mtime":1624264729937,"results":"67","hashOfConfig":"41"},{"size":86,"mtime":1616787032468,"results":"68","hashOfConfig":"41"},{"size":174,"mtime":1622662694823,"results":"69","hashOfConfig":"41"},{"size":278,"mtime":1618859984133,"results":"70","hashOfConfig":"41"},{"size":667,"mtime":1621974039731,"results":"71","hashOfConfig":"41"},{"size":162,"mtime":1616866455400,"results":"72","hashOfConfig":"41"},{"size":6258,"mtime":1624264655124,"results":"73","hashOfConfig":"41"},{"size":2126,"mtime":1617826662185,"results":"74","hashOfConfig":"41"},{"size":2678,"mtime":1623964627416,"results":"75","hashOfConfig":"41"},{"size":330,"mtime":1617815502987,"results":"76","hashOfConfig":"41"},{"size":1162,"mtime":1614369805937,"results":"77","hashOfConfig":"41"},{"size":6852,"mtime":1624572550610,"results":"78","hashOfConfig":"41"},{"size":523,"mtime":1617372091848,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"83"},"o0w05g",{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"83"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"83"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"83"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"83"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"83"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"83"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"83"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\index.tsx",["168"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport thunk from \"redux-thunk\";\n\nimport App from \"./App\";\nimport { loadState, saveState } from \"./redux/middleware/localStorage\";\nimport { rootReducer } from \"./redux/rootReducer\";\nimport { sagaWatcher } from \"./redux/sagas\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst saga = createSagaMiddleware();\n\nconst persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  composeWithDevTools(applyMiddleware(saga))\n);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nsaga.run(sagaWatcher);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["169","170"],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\reportWebVitals.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\middleware\\localStorage.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\sagas.ts",["171","172"],"import axios from \"axios\";\r\n// import { useSelector } from \"react-redux\";\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport {\r\n  apiKey,\r\n  page,\r\n  url,\r\n  urlForCertainMovieFetch,\r\n} from \"../apiAttributes/apiAttributes\";\r\nimport { ICard } from \"../interfaces/ICard\";\r\nimport IMovie from \"../interfaces/IMovie\";\r\nimport { SET_CURRENT_PAGE } from \"./currentPage/pagesResultsTypes\";\r\nimport { hideError, showError } from \"./error/errorActions\";\r\nimport { SHOW_ERROR } from \"./error/errorTypes\";\r\nimport { IfetchMovieAction } from \"./fetchMovie/fetchMovieActions\";\r\nimport { FETCH_MOVIE } from \"./fetchMovie/fetchMovieTypes\";\r\nimport { hideLoader, showLoader } from \"./loader/loaderActions\";\r\nimport { LOAD_MOVIE } from \"./loadMovie/loadMovieTypes\";\r\nimport { IState } from \"./rootReducer\";\r\nimport { IsearchAction } from \"./search/searchReducer\";\r\n// import { IState } from \"./rootReducer\";\r\n// import { IsearchAction } from \"./search/searchReducer\";\r\nimport { SEARCH_MOVIE } from \"./search/searchTypes\";\r\nimport { FETCHED_MOVIES } from \"./searchResults/searchResultsTypes\";\r\n\r\nexport function* sagaWatcher() {\r\n  yield takeEvery(SEARCH_MOVIE, sagaWorker);\r\n  yield takeEvery(SET_CURRENT_PAGE, sagaWorker);\r\n\r\n  yield takeEvery(FETCH_MOVIE, sagaMovieWorker);\r\n}\r\n\r\nconst delay = (ms: number) => new Promise((res) => setTimeout(res, ms));\r\n\r\nfunction* sagaWorker(action: any) {\r\n  let currentPage = null;\r\n  let searchRequest = null;\r\n  const state: IState = yield select();\r\n  if (action.type === SEARCH_MOVIE) {\r\n    // yield put({ type: SET_CURRENT_PAGE, payload: 1 });\r\n    currentPage = 1;\r\n    searchRequest = action.payload;\r\n  }\r\n  // else {\r\n  //   console.log(`action`, action);\r\n  // }\r\n  if (action.type === SET_CURRENT_PAGE) {\r\n    // yield put({ type: SET_CURRENT_PAGE, payload: 1 });\r\n    // console.log(`action`, action);\r\n    currentPage = action.payload.currentPage;\r\n    searchRequest = state.search.searchRequest;\r\n  }\r\n  // yield console.log(`searchRequest`, searchRequest);\r\n  // yield console.log(`currentPage`, currentPage);\r\n\r\n  // yield delay(2000);\r\n  yield put(hideLoader());\r\n  try {\r\n    yield put(showLoader());\r\n    const results: ICard[] = yield call(\r\n      fetchMovies,\r\n      searchRequest,\r\n      currentPage\r\n    );\r\n    yield put({ type: FETCHED_MOVIES, payload: results });\r\n    yield put(hideLoader());\r\n  } catch (error) {\r\n    const results = { results: [], totalResults: 0 };\r\n    yield put({ type: FETCHED_MOVIES, payload: results });\r\n    yield put({ type: SHOW_ERROR, payload: error.message });\r\n    // yield put(showError(error));\r\n    yield delay(4000);\r\n    yield put({ type: SEARCH_MOVIE, payload: \"\" });\r\n    yield put({ type: SET_CURRENT_PAGE, payload: 1 });\r\n    yield put(hideError());\r\n    yield put(hideLoader());\r\n    // yield put(hideAlert());\r\n    // console.log(`error`, error);\r\n  }\r\n}\r\n\r\nfunction* sagaMovieWorker(action: IfetchMovieAction) {\r\n  try {\r\n    yield put(showLoader());\r\n    const movieId = action.payload;\r\n    const result: IMovie[] = yield call(fetchMovie, movieId);\r\n    // console.log(`result`, result);\r\n    yield put({ type: LOAD_MOVIE, payload: result });\r\n    yield put(hideLoader());\r\n  } catch (error) {\r\n    const result = null;\r\n    yield put({ type: LOAD_MOVIE, payload: result });\r\n    yield put({ type: SHOW_ERROR, payload: error.message });\r\n    // yield put(showError(error));\r\n    yield delay(4000);\r\n    yield put(hideError());\r\n    yield put(hideLoader());\r\n    // yield put(hideAlert());\r\n    // console.log(`error`, error);\r\n  }\r\n}\r\n\r\n// search: string, pageNum = \"\"\r\n\r\n// eslint-disable-next-line react-hooks/rules-of-hooks\r\n// const search = useSelector((state: IState) => state.search);\r\n// const pageNum = \"\";\r\nconst fetchMovies = async (search: string, pageNum: number = 1) => {\r\n  if (!search && !pageNum) return new Error(\"Wrong search params!\");\r\n  // console.log(`search`, search);\r\n  if (!search.trim() || !search) return;\r\n  return await axios\r\n    .get(url + search + page + pageNum + apiKey)\r\n    .then((data) => {\r\n      // console.log(`data`, data);\r\n      if (data.data.Error) {\r\n        throw Error(data.data.Error);\r\n      }\r\n      if (data.data.Error) {\r\n        return {\r\n          results: [],\r\n          totalResults: 0,\r\n        };\r\n      }\r\n      return {\r\n        results: data.data.Search,\r\n        totalResults: data.data.totalResults,\r\n      };\r\n    });\r\n};\r\n\r\n// const url = \"https://www.omdbapi.com/?i=\";\r\n// const apiKey = \"&apikey=4095ed63\";\r\n// const full = \"\";\r\n//?imdbID=tt0094432\r\n\r\nconst fetchMovie = async (imdbID: string): Promise<IMovie | null> => {\r\n  // const url = \"https://www.omdbapi.com/?i=\";\r\n  if (!imdbID.trim() || !imdbID) return null;\r\n  return await axios\r\n    .get(urlForCertainMovieFetch + imdbID + apiKey)\r\n    .then((data) => {\r\n      // console.log(`data`, data);\r\n      return data.data;\r\n    });\r\n};\r\n","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\App.tsx",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\rootReducer.tsx",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\error\\errorActions.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\currentPage\\pagesResultsTypes.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\error\\errorTypes.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loadMovie\\loadMovieTypes.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\fetchMovie\\fetchMovieTypes.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\apiAttributes\\apiAttributes.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loader\\loaderActions.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\fetchMovie\\fetchMovieReducer.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\searchResults\\searchResultsTypes.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\searchResults\\searchResultsReducer.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loader\\loaderReducer.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\currentPage\\currentPageReducer.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loadMovie\\loadMovieReducer.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\error\\errorReducer.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\search\\searchReducer.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\library\\libraryReducer.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\search\\searchTypes.tsx",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\AppBar.tsx",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\pages\\MoviePage.tsx",["173","174","175","176","177","178"],"import {\r\n  Button,\r\n  createStyles,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Theme,\r\n  Typography,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ICard } from \"../interfaces/ICard\";\r\nimport { fetchMovie } from \"../redux/fetchMovie/fetchMovieActions\";\r\nimport { IState } from \"../redux/rootReducer\";\r\nimport {\r\n  addToLibrary,\r\n  removeFromLibrary,\r\n} from \"../redux/library/libraryActions\";\r\nimport {\r\n  ADD_TO_LIBRARY,\r\n  ELibrary,\r\n  REMOVE_FROM_LIBRARY,\r\n} from \"../redux/library/libraryTypes\";\r\nimport { AnyMxRecord } from \"dns\";\r\nimport { LibraryButton } from \"../components/LibraryButton\";\r\nimport { Loader } from \"../components/Loader\";\r\n\r\n// import mockMovie from \"../mockData/mockMovie.json\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    container: {\r\n      justifyContent: \"center\",\r\n      marginTop: \"1rem\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: \"90%\",\r\n        margin: \"0 auto\",\r\n      },\r\n      [theme.breakpoints.up(\"md\")]: { width: \"80%\" },\r\n      [theme.breakpoints.up(\"lg\")]: { width: \"55%\" },\r\n    },\r\n    descriptionContainer: {\r\n      width: \"80%\",\r\n    },\r\n    title: {\r\n      fontSize: \"2rem\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    year: {\r\n      color: \"#9e9e9e\",\r\n    },\r\n    infoTitle: {\r\n      fontSize: \"1.1rem\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    description: {\r\n      maxWidth: \"34rem\",\r\n    },\r\n    votes: {\r\n      color: \"#9e9e9e\",\r\n      fontSize: \"0.9rem\",\r\n    },\r\n    barButton: {\r\n      textAlign: \"center\",\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        fontSize: \".6rem\",\r\n      },\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        fontSize: \"default\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nexport const MoviePage = () => {\r\n  const theme = useTheme();\r\n  const styles = useStyles();\r\n  const matchesSm = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  // console.log(`history`, history);\r\n  // const [movie, setmovie] = useState(null);\r\n  useEffect(() => {\r\n    // console.log(`history`, history);\r\n    const movieId = history.location.search.split(\"=\")[1];\r\n    dispatch(fetchMovie(movieId));\r\n  }, []);\r\n  const movie = useSelector((state: IState) => state.movie?.movie!);\r\n  let watched = useSelector((state: IState) => state.library.watched);\r\n  const loading = useSelector((state: IState) => state.loader.loading)\r\n\r\n  // console.log(`movie`, movie);\r\n  // setmovie(useSelector((state: IState) => state.movie));\r\n  // const movie = undefined;\r\n\r\n  let isWatchedInitialState = !!watched.find(\r\n    (watched) => watched.imdbID === movie.imdbID\r\n  );\r\n  const [isWatched, setisWatched] = useState<boolean>(isWatchedInitialState);\r\n\r\n  if (!movie) return null;\r\n  const {\r\n    Poster,\r\n    Title,\r\n    Year,\r\n    Plot,\r\n    Awards,\r\n    imdbRating,\r\n    imdbVotes,\r\n    Actors,\r\n    Country,\r\n    Genre,\r\n    Runtime,\r\n    BoxOffice,\r\n    Type,\r\n    imdbID,\r\n  } = movie!;\r\n  const movieCard: ICard = { Poster, Title, Type, Year, imdbID };\r\n\r\n  // let isWatched = watched.includes(movieCard);\r\n  // // console.log(`watched=`, watched);\r\n  // console.log(`isWatched=`, isWatched);\r\n\r\n  const handleClick = (collection: string, isInLibrary: boolean) => {\r\n    console.log(\"click\");\r\n    console.log(\"collection=\", collection);\r\n    switch (collection) {\r\n      case ELibrary[0]:\r\n        isInLibrary\r\n          ? dispatch(addToLibrary(collection, movieCard))\r\n          : dispatch(removeFromLibrary(collection, movieCard));\r\n        // if (action === ADD_TO_LIBRARY) {\r\n        //   dispatch(addToLibrary(collection, movieCard));\r\n        // }\r\n        // if (action === REMOVE_FROM_LIBRARY) {\r\n        //   dispatch(removeFromLibrary(collection, movieCard));\r\n        // }\r\n        setisWatched(!isWatched);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <>\r\n    {loading ? (<Grid\r\n          container\r\n          direction={matchesSm ? \"row\" : \"column\"}\r\n          alignItems={matchesSm ? \"flex-start\" : \"center\"}\r\n          wrap={matchesSm ? \"nowrap\" : \"wrap\"}\r\n          spacing={2}\r\n          className={styles.container}\r\n        ><Loader /></Grid>):\r\n      (movie ? (\r\n        <Grid\r\n          container\r\n          direction={matchesSm ? \"row\" : \"column\"}\r\n          alignItems={matchesSm ? \"flex-start\" : \"center\"}\r\n          wrap={matchesSm ? \"nowrap\" : \"wrap\"}\r\n          spacing={2}\r\n          className={styles.container}\r\n        >\r\n          <Grid item>\r\n            <img src={Poster} alt={Title} />\r\n          </Grid>\r\n          <Grid item className={styles.descriptionContainer}>\r\n            <Typography variant=\"h1\" className={styles.title}>\r\n              {Title}\r\n              <Typography\r\n                display=\"inline\"\r\n                className={styles.year}\r\n              >{` ${Year}`}</Typography>\r\n            </Typography>\r\n            <Typography className={styles.description}>{Plot}</Typography>\r\n            <Typography className={styles.infoTitle}>\r\n              Awards: <Typography display=\"inline\">{Awards}</Typography>\r\n            </Typography>\r\n            <Typography className={styles.infoTitle}>\r\n              Rating: <Typography display=\"inline\">{imdbRating}</Typography>{\" \"}\r\n              <Typography display=\"inline\" className={styles.votes}>\r\n                {imdbVotes} votes\r\n              </Typography>\r\n            </Typography>\r\n            <Typography className={styles.infoTitle}>\r\n              Actors: <Typography display=\"inline\">{Actors}</Typography>\r\n            </Typography>\r\n            <Typography className={styles.infoTitle}>\r\n              Country: <Typography display=\"inline\">{Country}</Typography>\r\n            </Typography>\r\n            <Typography className={styles.infoTitle}>\r\n              Genre: <Typography display=\"inline\">{Genre}</Typography>\r\n            </Typography>\r\n            <Typography className={styles.infoTitle}>\r\n              Runtime: <Typography display=\"inline\">{Runtime}</Typography>\r\n            </Typography>\r\n            <Typography className={styles.infoTitle}>\r\n              Box office: <Typography display=\"inline\">{BoxOffice}</Typography>\r\n            </Typography>\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"row\"\r\n              wrap=\"nowrap\"\r\n              justify=\"space-between\"\r\n              // spacing={1}\r\n            >\r\n              <LibraryButton libraryName={ELibrary[0]} movieCard={movieCard} />\r\n              <LibraryButton libraryName={ELibrary[1]} movieCard={movieCard} />\r\n              <LibraryButton libraryName={ELibrary[2]} movieCard={movieCard} />\r\n              <Button\r\n                className={styles.barButton}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                fullWidth={true}\r\n                href={`https://www.google.com/search?q=${Title}+${Year}+#movie`}\r\n                target=\"_blank\"\r\n              >\r\n                Advanced <br />\r\n                search\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <Typography>Error</Typography>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\pages\\HomePage.tsx",["179","180","181","182","183"],"import {\r\n  Button,\r\n  createStyles,\r\n  Grid,\r\n  makeStyles,\r\n  Theme,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Loader } from \"../components/Loader\";\r\nimport { PaginationList } from \"../components/PaginationList\";\r\nimport { SearchField } from \"../components/SearchField\";\r\n\r\nimport mockList from \"../mockData/mockList.json\";\r\nimport { hideLoader, showLoader } from \"../redux/loader/loaderActions\";\r\n\r\nimport { IState } from \"../redux/rootReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    title: {\r\n      padding: \"1rem 0 1rem 0\",\r\n      fontSize: \"2.2rem\",\r\n      fontWeight: 400,\r\n      textTransform: \"uppercase\",\r\n      textAlign: \"center\",\r\n      fontFamily: \"Verdana\",\r\n    },\r\n    media: {\r\n      width: \"100%\",\r\n      height: \"initial\",\r\n    },\r\n    searchRequest: {\r\n      padding: \"1rem 0 1rem 0\",\r\n      fontSize: \"1.2rem\",\r\n      fontWeight: 400,\r\n      textTransform: \"uppercase\",\r\n      textAlign: \"center\",\r\n      fontFamily: \"Verdana\",\r\n    },\r\n  })\r\n);\r\n\r\nexport const HomePage = () => {\r\n  const classes = useStyles();\r\n  // console.log(\"mockList.Search=\", mockList.Search);\r\n  // const moviesList = mockList.Search;\r\n  const moviesList = useSelector(\r\n    (state: IState) => state.searchResults.results\r\n  );\r\n  // console.log(`moviesList`, moviesList);\r\n  let loading = useSelector((state: IState) => state.loader.loading);\r\n  let search = useSelector((state: IState) => state.search.searchRequest);\r\n  let error = useSelector((state: IState) => state.error.error);\r\n\r\n  // console.log(`loading`, loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const pagesCount = Math.ceil(\r\n    useSelector((state: IState) => state.searchResults.totalResults) / 10\r\n  );\r\n  const currentPage = \r\n    useSelector((state: IState) => state.currentPage.currentPage)\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\" alignItems=\"center\">\r\n        <Typography variant=\"h1\" className={classes.title}>\r\n          Your Movies Library\r\n        </Typography>\r\n        <SearchField />\r\n        {/* <Button onClick={handleClick}>show loader</Button>\r\n        <Button onClick={handleClick2}>hide loader</Button> */}\r\n        {/* {loading && <Loader />} */}\r\n        {search && (\r\n          <Typography variant=\"h2\" className={classes.searchRequest}>\r\n            Results for : {search}\r\n          </Typography>\r\n        )}\r\n        {error && (\r\n          <Typography variant=\"h2\" className={classes.searchRequest}>\r\n            {error}\r\n          </Typography>\r\n        )}\r\n        {loading && <Loader />}\r\n        <PaginationList moviesList={moviesList} pagesCount={pagesCount} currentPage={currentPage}/>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\pages\\LibraryPage.tsx",["184","185"],"import React, { useState } from \"react\";\r\n// import Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles, Theme, useTheme } from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport WatchLaterIcon from \"@material-ui/icons/WatchLater\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport { AppBar, Box, Grid, Typography } from \"@material-ui/core\";\r\n// import SwipeableViews from \"react-swipeable-views\";\r\n\r\n// import mockList from \"../mockData/mockList.json\";\r\n// import { ICard } from \"../interfaces/ICard\";\r\n// import { PaginationList } from \"../components/PaginationList\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IState } from \"../redux/rootReducer\";\r\nimport { ELibrary } from \"../redux/library/libraryTypes\";\r\nimport { ICard } from \"../interfaces/ICard\";\r\nimport { PaginationLibraryList } from \"../components/PaginationLibraryList\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: { width: \"80%\" },\r\n    [theme.breakpoints.up(\"md\")]: { width: \"65%\" },\r\n  },\r\n  library: {\r\n    paddingTop: \"1rem\",\r\n  },\r\n  message: {\r\n    margin: \"1rem\",\r\n    color: \"rgba(0, 0, 0, 0.54)\",\r\n    textTransform: \"uppercase\",\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  dir?: string;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    \"aria-controls\": `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\ninterface ILibraryLists {\r\n  [key: string]: ICard[];\r\n}\r\n\r\nexport const LibraryPage = () => {\r\n  // console.log(\"mockList.Search\", mockList.Search);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const state = useSelector((state: IState) => state);\r\n  const planned = state.library[ELibrary[0]];\r\n  const watched = state.library[ELibrary[1]];\r\n  const favorites = state.library[ELibrary[2]];\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  // const libraryLists = [\r\n  //   { planned: planned, pagesCount: Math.ceil(planned.length / 10) },\r\n  //   { watched: watched, pagesCount: Math.ceil(watched.length / 10) },\r\n  //   { favorites: favorites, pagesCount: Math.ceil(favorites.length / 10) },\r\n  // ];\r\n  const libraryLists = [planned, watched, favorites];\r\n\r\n  // console.log(\"value\", value);\r\n  // console.log(\"lists[value]=\", lists[value]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        className={classes.library}\r\n      >\r\n        <div className={classes.root}>\r\n          {/* <Paper square> */}\r\n          <AppBar position=\"static\" color=\"transparent\" elevation={0}>\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"secondary\"\r\n              textColor=\"secondary\"\r\n              variant=\"fullWidth\"\r\n              aria-label=\"full width tabs example\"\r\n            >\r\n              <Tab\r\n                label=\"PLANNED\"\r\n                icon={<WatchLaterIcon />}\r\n                {...a11yProps(0)}\r\n              />\r\n              <Tab\r\n                label=\"WATCHED\"\r\n                icon={<VisibilityIcon />}\r\n                {...a11yProps(1)}\r\n              />\r\n              <Tab\r\n                label=\"FAVORITES\"\r\n                icon={<FavoriteIcon />}\r\n                {...a11yProps(2)}\r\n              />\r\n            </Tabs>\r\n          </AppBar>\r\n          {/* <SwipeableViews\r\n            axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n            index={value}\r\n            onChangeIndex={handleChangeIndex}\r\n          > */}\r\n          <TabPanel value={value} index={0} dir={theme.direction}>\r\n            {libraryLists[0].length ? (\r\n              <PaginationLibraryList\r\n                moviesList={libraryLists[0]}\r\n                pagesCount={Math.ceil(libraryLists[0].length / 10)}\r\n              />\r\n            ) : (\r\n              <Typography className={classes.message}>Nothing here</Typography>\r\n            )}\r\n          </TabPanel>\r\n          <TabPanel value={value} index={1} dir={theme.direction}>\r\n            {libraryLists[1].length ? (\r\n              <PaginationLibraryList\r\n                moviesList={libraryLists[1]}\r\n                pagesCount={Math.ceil(libraryLists[1].length / 10)}\r\n              />\r\n            ) : (\r\n              <Typography className={classes.message}>Nothing here</Typography>\r\n            )}\r\n          </TabPanel>\r\n          <TabPanel value={value} index={2} dir={theme.direction}>\r\n            {libraryLists[2].length ? (\r\n              <PaginationLibraryList\r\n                moviesList={libraryLists[2]}\r\n                pagesCount={Math.ceil(libraryLists[2].length / 10)}\r\n              />\r\n            ) : (\r\n              <Typography className={classes.message}>Nothing here</Typography>\r\n            )}\r\n          </TabPanel>\r\n        </div>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\loader\\loaderTypes.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\library\\libraryTypes.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\fetchMovie\\fetchMovieActions.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\library\\libraryActions.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\Loader.tsx",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\PaginationList.tsx",["186","187","188"],"import {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardMedia,\r\n  createStyles,\r\n  Fab,\r\n  Grid,\r\n  makeStyles,\r\n  Theme,\r\n  Toolbar,\r\n  Typography,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport React from \"react\";\r\n\r\nimport { ICard } from \"../interfaces/ICard\";\r\n// import { getPagesCount } from \"./PaginationListHelpers/getPagesCount\";\r\n// import { splitMoviesList } from \"./PaginationListHelpers/splitMoviesList\";\r\nimport { ScrollTop } from \"./ScrollTop\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IState } from \"../redux/rootReducer\";\r\nimport { setCurrentPage } from \"../redux/currentPage/currentPageActions\";\r\n// import { fetchMovieAction } from \"../redux/fetchMovie/fetchMovieActions\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import { Loader } from \"./Loader\";\r\n// import { useSelector } from \"react-redux\";\r\n// import { IState } from \"../redux/rootReducer\";\r\nimport {moviesPerPageDefaultServerResponse} from \"../apiAttributes/apiAttributes\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    container: {\r\n      padding: \"1rem 0 1rem 0\",\r\n    },\r\n    root: {\r\n      margin: \"1rem\",\r\n    },\r\n    media: {\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        height: 270,\r\n        width: 180,\r\n      },\r\n      height: 450,\r\n      width: 300,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n    },\r\n    message: {\r\n      margin: \"1rem\",\r\n      color: \"rgba(0, 0, 0, 0.54)\",\r\n      textTransform: \"uppercase\",\r\n    },\r\n    pagination: {\r\n      width: \"100%\",\r\n    },\r\n    backToTopAnchor: {\r\n      height: 0,\r\n    },\r\n  })\r\n);\r\n\r\nexport interface IPaginationList {\r\n  moviesList: ICard[];\r\n  pagesCount: number;\r\n  currentPage?: number\r\n}\r\n\r\nexport const PaginationList = ({ moviesList, pagesCount, currentPage=1 }: IPaginationList) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const displayedMoviesList = moviesList;\r\n  const searchRequest = useSelector(\r\n    (state: IState) => state.search.searchRequest\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const handleChange = (event: React.ChangeEvent<any>, page: number) => {\r\n    dispatch(setCurrentPage(page));\r\n  };\r\n  const handleClick = (movieId: string) => {\r\n    history.push(\"/movie/?=\" + movieId);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={0}>\r\n        <Toolbar id=\"back-to-top-anchor\" className={classes.backToTopAnchor} />\r\n        <Grid container className={classes.container} spacing={2}>\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            direction=\"row\"\r\n            wrap=\"wrap\"\r\n            // className={classes.positionContainer}\r\n          >\r\n            {displayedMoviesList\r\n              ? displayedMoviesList.map((movie: ICard) => (\r\n                  <Grid item key={movie.imdbID} xs={12} sm={6} md={4}>\r\n                    <Card className={classes.root}>\r\n                      <CardActionArea\r\n                        onClick={() => {\r\n                          handleClick(movie.imdbID);\r\n                          // console.log(`movie.imdbID`, movie.imdbID);\r\n                        }}\r\n                      >\r\n                        {movie.Poster !== \"N/A\" ? (\r\n                          <CardMedia\r\n                            image={movie.Poster}\r\n                            title={movie.Title}\r\n                            className={classes.media}\r\n                          />\r\n                        ) : (\r\n                          <Typography\r\n                            gutterBottom\r\n                            variant=\"caption\"\r\n                            component=\"h2\"\r\n                            align=\"center\"\r\n                            className={classes.message}\r\n                          >\r\n                            {movie.Title}, no poster\r\n                          </Typography>\r\n                        )}\r\n\r\n                        <CardContent>\r\n                          <Typography\r\n                            gutterBottom\r\n                            variant=\"h5\"\r\n                            component=\"h2\"\r\n                            align=\"center\"\r\n                          >\r\n                            {movie.Title}\r\n                          </Typography>\r\n                          <Typography\r\n                            variant=\"body2\"\r\n                            color=\"textSecondary\"\r\n                            component=\"p\"\r\n                          >\r\n                            Year: {movie.Year}\r\n                          </Typography>\r\n                        </CardContent>\r\n                      </CardActionArea>\r\n                    </Card>\r\n                  </Grid>\r\n                ))\r\n              : // <Typography align=\"center\" className={classes.message}>\r\n                //   Nothing here\r\n                // </Typography>\r\n                null}\r\n          </Grid>\r\n          {displayedMoviesList.length ? (\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid\r\n              // container\r\n              // direction=\"row\"\r\n              // justify=\"center\"\r\n              // alignItems=\"center\"\r\n              // className={classes.pagination}\r\n              >\r\n                <Pagination\r\n                  count={pagesCount}\r\n                  defaultPage={currentPage}\r\n                  siblingCount={1}\r\n                  boundaryCount={1}\r\n                  size=\"large\"\r\n                  className={classes.pagination}\r\n                  onChange={(event: React.ChangeEvent<any>, page: number) =>\r\n                    handleChange(event, page)\r\n                  }\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          ) : null}\r\n        </Grid>\r\n        <ScrollTop {...null}>\r\n          <Fab size=\"small\" aria-label=\"scroll back to top\">\r\n            <KeyboardArrowUpIcon />\r\n          </Fab>\r\n        </ScrollTop>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\SearchField.tsx",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\LibraryButton.tsx",["189","190"],"import { createStyles, makeStyles, Theme } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ICard } from \"../interfaces/ICard\";\r\nimport {\r\n  addToLibrary,\r\n  removeFromLibrary,\r\n} from \"../redux/library/libraryActions\";\r\nimport { ELibrary } from \"../redux/library/libraryTypes\";\r\nimport { IState } from \"../redux/rootReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    barButton: {\r\n      textAlign: \"center\",\r\n      minHeight: \"4rem\",\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        fontSize: \".6rem\",\r\n      },\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        fontSize: \"default\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nexport interface ILibraryButtonProps {\r\n  libraryName: string;\r\n  movieCard: ICard;\r\n}\r\n\r\nexport const LibraryButton = ({\r\n  libraryName,\r\n  movieCard,\r\n}: ILibraryButtonProps) => {\r\n  // console.log(\"libraryName=\", libraryName);\r\n  const styles = useStyles();\r\n  let library = useSelector((state: IState) => state.library[libraryName]);\r\n  // console.log(\"libraryName in button=\", libraryName);\r\n  // console.log(\"library=\", library);\r\n  // console.log(\"library in button=\", library);\r\n  // console.log(\"movieCard in button=\", movieCard.Title);\r\n\r\n  const tryToFind = library.find(\r\n    (movie) => movie.imdbID === movieCard.imdbID\r\n  );\r\n  // console.log(\"tryToFind in button=\", tryToFind);\r\n\r\n\r\n  let isInLibrary = (tryToFind === undefined) ? false : !!tryToFind;\r\n  // console.log(\"library.find in button=\", library.find(\r\n  //   (movie) => movie.imdbID === movieCard.imdbID\r\n  // ));\r\n\r\n  // console.log(\"isInLibrary=\", isInLibrary);\r\n\r\n\r\n  // const [isInLibrary, setisInLibrary] = useState<boolean>(\r\n  //   isInLibrary\r\n  // );\r\n  useEffect(() => {\r\n    // setisInLibrary(isInLibrary)\r\n  }, [isInLibrary])\r\n\r\n  // const [isInLibrary, setisInLibrary] = useState(\r\n  //   {includes: isInLibrary}\r\n  // );\r\n\r\n  // console.log(\"isInLibrary in button=\", isInLibrary);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = () => {\r\n    // console.log(\"click\");\r\n    !isInLibrary\r\n      ? dispatch(addToLibrary(libraryName, movieCard))\r\n      : dispatch(removeFromLibrary(libraryName, movieCard));\r\n    // setisInLibrary(!isInLibrary);\r\n    // setisInLibrary({includes: !isInLibrary.includes});\r\n\r\n  };\r\n  return (\r\n    <Button\r\n      className={styles.barButton}\r\n      variant=\"outlined\"\r\n      size=\"small\"\r\n      fullWidth={true}\r\n      onClick={handleClick}\r\n    >\r\n      {isInLibrary ? \"Remove from\" : \"Add to\"}\r\n      <br />\r\n      {libraryName}\r\n    </Button>\r\n  );\r\n};\r\n","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\redux\\currentPage\\currentPageActions.ts",[],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\ScrollTop.tsx",[],["191","192"],"F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\PaginationLibraryList.tsx",["193","194","195","196","197","198"],"import {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardMedia,\r\n  createStyles,\r\n  Fab,\r\n  Grid,\r\n  makeStyles,\r\n  Theme,\r\n  Toolbar,\r\n  Typography,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nimport { ICard } from \"../interfaces/ICard\";\r\nimport { ScrollTop } from \"./ScrollTop\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IState } from \"../redux/rootReducer\";\r\nimport { setCurrentPage } from \"../redux/currentPage/currentPageActions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { moviesPerPageDefaultServerResponse } from \"../apiAttributes/apiAttributes\";\r\nimport { splitMoviesList } from \"./PaginationListHelpers/splitMoviesList\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    container: {\r\n      padding: \"1rem 0 1rem 0\",\r\n    },\r\n    root: {\r\n      margin: \"1rem\",\r\n    },\r\n    media: {\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        height: 270,\r\n        width: 180,\r\n      },\r\n      height: 450,\r\n      width: 300,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n    },\r\n    message: {\r\n      margin: \"1rem\",\r\n      color: \"rgba(0, 0, 0, 0.54)\",\r\n      textTransform: \"uppercase\",\r\n    },\r\n    pagination: {\r\n      width: \"100%\",\r\n    },\r\n    backToTopAnchor: {\r\n      height: 0,\r\n    },\r\n  })\r\n);\r\n\r\nexport interface IPaginationLibraryList {\r\n  moviesList: ICard[];\r\n  pagesCount: number;\r\n  currentPage?: number\r\n}\r\n\r\nexport const PaginationLibraryList = ({ moviesList, pagesCount, currentPage = 1 }: IPaginationLibraryList) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  // const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  // const searchRequest = useSelector(\r\n  //   (state: IState) => state.search.searchRequest\r\n  // );\r\n  // console.log(`currentPage=`, currentPage);\r\n\r\n  // if there are more than 10 movies per page than this is libary list and movies should be splitted\r\n  const moreThanMaxMoviesPerPage = moviesList.length % moviesPerPageDefaultServerResponse !== 0;\r\n  console.log(`moviesList.length % moviesPerPageDefaultServerResponse=`, moviesList.length % moviesPerPageDefaultServerResponse);\r\n  console.log(`moreThanMaxMoviesPerPage=`, moreThanMaxMoviesPerPage);\r\n\r\n  const libraryLists = splitMoviesList(moviesList, pagesCount);\r\n  console.log(`libraryLists=`, libraryLists);\r\n  // let displayedMoviesList = libraryLists[0];\r\n  // console.log(`displayedMoviesList=`, displayedMoviesList);\r\n\r\n  const [displayedMoviesList, setdisplayedMoviesLiest] = useState(libraryLists[0])\r\n\r\n  // const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n\r\n\r\n  const handleChange = (event: React.ChangeEvent<any>, page: number) => {\r\n    // dispatch(setCurrentPage(page));\r\n  console.log(`page=`, page);\r\n  // displayedMoviesList = libraryLists[page-1]\r\n  console.log(`displayedMoviesList=`, displayedMoviesList);\r\n  setdisplayedMoviesLiest(libraryLists[page-1])\r\n  };\r\n\r\n  const handleClick = (movieId: string) => {\r\n    history.push(\"/movie/?=\" + movieId);\r\n  };\r\nconsole.log(`displayedMoviesList=`, displayedMoviesList);\r\n  return (\r\n      <>\r\n      <Grid container spacing={0}>\r\n        <Toolbar id=\"back-to-top-anchor\" className={classes.backToTopAnchor} />\r\n        <Grid container className={classes.container} spacing={2}>\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            direction=\"row\"\r\n            wrap=\"wrap\"\r\n          >\r\n            {displayedMoviesList\r\n              ? displayedMoviesList.map((movie: ICard) => (\r\n                <Grid item key={movie.imdbID} xs={12} sm={6} md={4}>\r\n                  <Card className={classes.root}>\r\n                    <CardActionArea\r\n                      onClick={() => {\r\n                        handleClick(movie.imdbID);\r\n                        // console.log(`movie.imdbID`, movie.imdbID);\r\n                      }}\r\n                    >\r\n                      {movie.Poster !== \"N/A\" ? (\r\n                        <CardMedia\r\n                          image={movie.Poster}\r\n                          title={movie.Title}\r\n                          className={classes.media}\r\n                        />\r\n                      ) : (\r\n                        <Typography\r\n                          gutterBottom\r\n                          variant=\"caption\"\r\n                          component=\"h2\"\r\n                          align=\"center\"\r\n                          className={classes.message}\r\n                        >\r\n                          {movie.Title}, no poster\r\n                        </Typography>\r\n                      )}\r\n\r\n                      <CardContent>\r\n                        <Typography\r\n                          gutterBottom\r\n                          variant=\"h5\"\r\n                          component=\"h2\"\r\n                          align=\"center\"\r\n                        >\r\n                          {movie.Title}\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"body2\"\r\n                          color=\"textSecondary\"\r\n                          component=\"p\"\r\n                        >\r\n                          Year: {movie.Year}\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </CardActionArea>\r\n                  </Card>\r\n                </Grid>\r\n              ))\r\n              : // <Typography align=\"center\" className={classes.message}>\r\n              //   Nothing here\r\n              // </Typography>\r\n              null}\r\n          </Grid>\r\n          {displayedMoviesList.length ? (\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid\r\n              // container\r\n              // direction=\"row\"\r\n              // justify=\"center\"\r\n              // alignItems=\"center\"\r\n              // className={classes.pagination}\r\n              >\r\n                <Pagination\r\n                  count={pagesCount}\r\n                  defaultPage={currentPage}\r\n                  siblingCount={1}\r\n                  boundaryCount={1}\r\n                  size=\"large\"\r\n                  className={classes.pagination}\r\n                  onChange={(event: React.ChangeEvent<any>, page: number) =>\r\n                    handleChange(event, page)\r\n                  }\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          ) : null}\r\n        </Grid>\r\n        <ScrollTop {...null}>\r\n          <Fab size=\"small\" aria-label=\"scroll back to top\">\r\n            <KeyboardArrowUpIcon />\r\n          </Fab>\r\n        </ScrollTop>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","F:\\Code\\27-01-2021 filmoteka new\\my-app\\src\\components\\PaginationListHelpers\\splitMoviesList.ts",[],{"ruleId":"199","severity":1,"message":"200","line":8,"column":8,"nodeType":"201","messageId":"202","endLine":8,"endColumn":13},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"199","severity":1,"message":"207","line":13,"column":21,"nodeType":"201","messageId":"202","endLine":13,"endColumn":30},{"ruleId":"199","severity":1,"message":"208","line":20,"column":10,"nodeType":"201","messageId":"202","endLine":20,"endColumn":23},{"ruleId":"199","severity":1,"message":"209","line":5,"column":3,"nodeType":"201","messageId":"202","endLine":5,"endColumn":13},{"ruleId":"199","severity":1,"message":"210","line":24,"column":3,"nodeType":"201","messageId":"202","endLine":24,"endColumn":17},{"ruleId":"199","severity":1,"message":"211","line":26,"column":3,"nodeType":"201","messageId":"202","endLine":26,"endColumn":22},{"ruleId":"199","severity":1,"message":"212","line":28,"column":10,"nodeType":"201","messageId":"202","endLine":28,"endColumn":21},{"ruleId":"213","severity":1,"message":"214","line":92,"column":6,"nodeType":"215","endLine":92,"endColumn":8,"suggestions":"216"},{"ruleId":"199","severity":1,"message":"217","line":129,"column":9,"nodeType":"201","messageId":"202","endLine":129,"endColumn":20},{"ruleId":"199","severity":1,"message":"218","line":2,"column":3,"nodeType":"201","messageId":"202","endLine":2,"endColumn":9},{"ruleId":"199","severity":1,"message":"219","line":16,"column":8,"nodeType":"201","messageId":"202","endLine":16,"endColumn":16},{"ruleId":"199","severity":1,"message":"220","line":17,"column":10,"nodeType":"201","messageId":"202","endLine":17,"endColumn":20},{"ruleId":"199","severity":1,"message":"221","line":17,"column":22,"nodeType":"201","messageId":"202","endLine":17,"endColumn":32},{"ruleId":"199","severity":1,"message":"222","line":59,"column":9,"nodeType":"201","messageId":"202","endLine":59,"endColumn":17},{"ruleId":"199","severity":1,"message":"223","line":1,"column":17,"nodeType":"201","messageId":"202","endLine":1,"endColumn":25},{"ruleId":"199","severity":1,"message":"224","line":73,"column":11,"nodeType":"201","messageId":"202","endLine":73,"endColumn":24},{"ruleId":"199","severity":1,"message":"225","line":32,"column":9,"nodeType":"201","messageId":"202","endLine":32,"endColumn":43},{"ruleId":"199","severity":1,"message":"226","line":75,"column":9,"nodeType":"201","messageId":"202","endLine":75,"endColumn":16},{"ruleId":"199","severity":1,"message":"227","line":77,"column":9,"nodeType":"201","messageId":"202","endLine":77,"endColumn":22},{"ruleId":"199","severity":1,"message":"223","line":3,"column":28,"nodeType":"201","messageId":"202","endLine":3,"endColumn":36},{"ruleId":"199","severity":1,"message":"228","line":10,"column":10,"nodeType":"201","messageId":"202","endLine":10,"endColumn":18},{"ruleId":"203","replacedBy":"229"},{"ruleId":"205","replacedBy":"230"},{"ruleId":"199","severity":1,"message":"231","line":13,"column":3,"nodeType":"201","messageId":"202","endLine":13,"endColumn":16},{"ruleId":"199","severity":1,"message":"232","line":23,"column":10,"nodeType":"201","messageId":"202","endLine":23,"endColumn":21},{"ruleId":"199","severity":1,"message":"233","line":23,"column":23,"nodeType":"201","messageId":"202","endLine":23,"endColumn":34},{"ruleId":"199","severity":1,"message":"234","line":24,"column":10,"nodeType":"201","messageId":"202","endLine":24,"endColumn":16},{"ruleId":"199","severity":1,"message":"235","line":25,"column":10,"nodeType":"201","messageId":"202","endLine":25,"endColumn":24},{"ruleId":"199","severity":1,"message":"236","line":70,"column":9,"nodeType":"201","messageId":"202","endLine":70,"endColumn":14},"@typescript-eslint/no-unused-vars","'thunk' is defined but never used.","Identifier","unusedVar","no-native-reassign",["237"],"no-negated-in-lhs",["238"],"'showError' is defined but never used.","'IsearchAction' is defined but never used.","'IconButton' is defined but never used.","'ADD_TO_LIBRARY' is defined but never used.","'REMOVE_FROM_LIBRARY' is defined but never used.","'AnyMxRecord' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history.location.search'. Either include them or remove the dependency array.","ArrayExpression",["239"],"'handleClick' is assigned a value but never used.","'Button' is defined but never used.","'mockList' is defined but never used.","'hideLoader' is defined but never used.","'showLoader' is defined but never used.","'dispatch' is assigned a value but never used.","'useState' is defined but never used.","'ILibraryLists' is defined but never used.","'moviesPerPageDefaultServerResponse' is defined but never used.","'matches' is assigned a value but never used.","'searchRequest' is assigned a value but never used.","'ELibrary' is defined but never used.",["237"],["238"],"'useMediaQuery' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'IState' is defined but never used.","'setCurrentPage' is defined but never used.","'theme' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"240","fix":"241"},"Update the dependencies array to be: [dispatch, history.location.search]",{"range":"242","text":"243"},[2338,2340],"[dispatch, history.location.search]"]